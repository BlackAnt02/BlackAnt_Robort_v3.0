<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\ObjFlash\trochili.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\ObjFlash\trochili.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sun Nov 19 17:48:02 2017
<BR><P>
<H3>Maximum Stack Usage =       1632 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RobortGpsThreadServer &rArr; Robort_Fetch_GPS_Data &rArr; GPS_TransferEnd_Nema &rArr; nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[82]">OsCpuCalcHiPRIO</a>
 <LI><a href="#[a5]">OsCpuDisableInt</a>
 <LI><a href="#[f4]">OsCpuEnableInt</a>
 <LI><a href="#[9f]">OsCpuEnterCritical</a>
 <LI><a href="#[a1]">OsCpuLeaveCritical</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4b]">AppSetupEntry</a> from main.o(i.AppSetupEntry) referenced from main.o(i.main)
 <LI><a href="#[49]">BASystemSetupEntry</a> from bsp.o(i.BASystemSetupEntry) referenced from main.o(i.main)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from bsp_gps.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from bsp_gps.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from tcl.stm32.f103rb.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[48]">EvbTraceEntry</a> from bsp.o(i.EvbTraceEntry) referenced from main.o(i.main)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">IrqDaemonEntry</a> from tcl.irq.o(i.IrqDaemonEntry) referenced from tcl.irq.o(i.OsIrqModuleInit)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4a]">OsCpuSetupEntry</a> from tcl.arm.cm3.o(i.OsCpuSetupEntry) referenced from main.o(i.main)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from tcl.arm.cm3.keil.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">RobortBeepThreadServer</a> from beep.o(i.RobortBeepThreadServer) referenced from main.o(i.BindThreadFunction)
 <LI><a href="#[40]">RobortGpsThreadServer</a> from gps.o(i.RobortGpsThreadServer) referenced from main.o(i.BindThreadFunction)
 <LI><a href="#[3d]">RobortLightThreadServer</a> from light.o(i.RobortLightThreadServer) referenced from main.o(i.BindThreadFunction)
 <LI><a href="#[3e]">RobortMotorThreadServer</a> from motor.o(i.RobortMotorThreadServer) referenced from main.o(i.BindThreadFunction)
 <LI><a href="#[3c]">RobortParserThreadServer</a> from parser.o(i.RobortParserThreadServer) referenced from main.o(i.BindThreadFunction)
 <LI><a href="#[41]">RobortReceiverThreadServer</a> from receiver.o(i.RobortReceiverThreadServer) referenced from main.o(i.BindThreadFunction)
 <LI><a href="#[42]">RobortSenderThreadServer</a> from sender.o(i.RobortSenderThreadServer) referenced from main.o(i.BindThreadFunction)
 <LI><a href="#[3f]">RobortSteerThreadServer</a> from steer.o(i.RobortSteerThreadServer) referenced from main.o(i.BindThreadFunction)
 <LI><a href="#[45]">RootThreadEntry</a> from tcl.thread.o(i.RootThreadEntry) referenced from tcl.thread.o(i.OsThreadModuleInit)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">SuperviseThread</a> from tcl.thread.o(i.SuperviseThread) referenced from tcl.thread.o(i.OsThreadCreate)
 <LI><a href="#[9]">SysTick_Handler</a> from tcl.stm32.f103rb.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from bsp_timer.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from tcl.stm32.f103rb.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">TimerDaemonEntry</a> from tcl.timer.o(i.TimerDaemonEntry) referenced from tcl.timer.o(i.OsTimerModuleInit)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[39]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[38]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[47]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[3a]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[68]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[147]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[148]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[149]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>OsCpuCalcHiPRIO</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tcl.arm.cm3.keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcThreadHiRP
</UL>

<P><STRONG><a name="[a5]"></a>OsCpuDisableInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tcl.arm.cm3.keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootThreadEntry
</UL>

<P><STRONG><a name="[f4]"></a>OsCpuEnableInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tcl.arm.cm3.keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootThreadEntry
</UL>

<P><STRONG><a name="[9f]"></a>OsCpuEnterCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tcl.arm.cm3.keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclTrace
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqDaemonEntry
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelTickISR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelLeaveIntrState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelEnterIntrState
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqEnterISR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReleaseSemaphore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclObtainSemaphore
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateSemaphore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclSendMessage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateMsgQueue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclBroadcastMessage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDaemonEntry
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateThread
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclActivateThread
</UL>

<P><STRONG><a name="[a1]"></a>OsCpuLeaveCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tcl.arm.cm3.keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclTrace
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqDaemonEntry
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelTickISR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelLeaveIntrState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelEnterIntrState
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqEnterISR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReleaseSemaphore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclObtainSemaphore
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateSemaphore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclSendMessage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateMsgQueue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclBroadcastMessage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDaemonEntry
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateThread
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclActivateThread
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tcl.arm.cm3.keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsTimerTickUpdate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchExpiredTimer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[51]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Upload
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_Message_Data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsTimerModuleInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadModuleInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqModuleInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqDaemonEntry
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcCleanContext
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_zero_INFO
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b5]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelAddObject
</UL>

<P><STRONG><a name="[b4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelAddObject
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
</UL>

<P><STRONG><a name="[144]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>

<P><STRONG><a name="[135]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_pack_type
</UL>

<P><STRONG><a name="[55]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_TransferEnd_Nema
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_HalfTransferEnd_Nema
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPWMDutyCycle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPWMDutyCycle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPWMDutyCycle
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_TransferEnd_Nema
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_HalfTransferEnd_Nema
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPWMDutyCycle
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[151]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[152]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[153]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[66]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[154]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[155]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[65]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[6b]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[38]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[156]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>BASystemSetupEntry</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp.o(i.BASystemSetupEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = BASystemSetupEntry &rArr; Robort_GPS_Init &rArr; GPS_DATA_Init &rArr; nmea_parser_init &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Sender_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Receiver_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Parser_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Motor_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Light_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_GPS_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Beep_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ca]"></a>Crc16</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, bsp_common.o(i.Crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Upload
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Read
</UL>

<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_gps.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; GPS_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_gps.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; Upload_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>DMA1_DATA_Trans_Task_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart.o(i.DMA1_DATA_Trans_Task_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[fe]"></a>DMA1_DATA_Trans_Task_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart.o(i.DMA1_DATA_Trans_Task_ON))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART1_Write
</UL>

<P><STRONG><a name="[9d]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_ProcessDMAIRQ
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[8d]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DMA_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[88]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[9c]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_ProcessDMAIRQ
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[8c]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DMA_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[89]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DMA_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[86]"></a>DMA_Uart1_Init</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, bsp_uart.o(i.DMA_Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_Uart1_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Init
</UL>

<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcl.stm32.f103rb.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; OsIrqEnterISR &rArr; OsThreadResume &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelLeaveIntrState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelEnterIntrState
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqEnterISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EvbTraceEntry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.EvbTraceEntry))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f6]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_ConfgPin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[f8]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_SetPin
</UL>

<P><STRONG><a name="[f7]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_SetPin
</UL>

<P><STRONG><a name="[84]"></a>GPS_ProcessDMAIRQ</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_gps.o(i.GPS_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPS_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Interrupt_Config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[8a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Interrupt_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[bb]"></a>OsCpuBuildThreadStack</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, tcl.arm.cm3.o(i.OsCpuBuildThreadStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OsCpuBuildThreadStack
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
</UL>

<P><STRONG><a name="[be]"></a>OsCpuCancelThreadSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcl.arm.cm3.o(i.OsCpuCancelThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
</UL>

<P><STRONG><a name="[bd]"></a>OsCpuConfirmThreadSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcl.arm.cm3.o(i.OsCpuConfirmThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
</UL>

<P><STRONG><a name="[117]"></a>OsCpuLoadRootThread</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcl.arm.cm3.o(i.OsCpuLoadRootThread))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
</UL>

<P><STRONG><a name="[4a]"></a>OsCpuSetupEntry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcl.arm.cm3.o(i.OsCpuSetupEntry))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f3]"></a>OsCpuStartTickClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcl.arm.cm3.o(i.OsCpuStartTickClock))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootThreadEntry
</UL>

<P><STRONG><a name="[73]"></a>OsDebugPanic</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tcl.debug.o(i.OsDebugPanic))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuDisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjQueueRemoveNode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjQueueAddPriorityNode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjQueueAddFifoNode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListRemoveDiffNode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListAddDiffNode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsTimerModuleInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadTimerTickUpdate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadModuleInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListAddNode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclTrace
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListRemoveNode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqModuleInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelLeaveIntrState
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqEnterISR
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Sender_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Receiver_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Parser_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReleaseSemaphore
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateSemaphore
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateMsgQueue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclBroadcastMessage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateThread
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclActivateThread
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadLeaveQueue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperviseThread
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RootThreadEntry
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckThreadStack
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcThreadHiRP
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BroadcastInternalMessage
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortReceiverThreadServer
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortParserThreadServer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortGpsThreadServer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSetupEntry
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Semphore_Init
</UL>

<P><STRONG><a name="[a6]"></a>OsIpcBlockThread</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, tcl.ipc.o(i.OsIpcBlockThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OsIpcBlockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjQueueAddPriorityNode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjQueueAddFifoNode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListAddDiffNode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadLeaveQueue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReleaseSemaphore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclObtainSemaphore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclSendMessage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
</UL>

<P><STRONG><a name="[ac]"></a>OsIpcCleanContext</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tcl.ipc.o(i.OsIpcCleanContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OsIpcCleanContext
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReleaseSemaphore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclObtainSemaphore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclSendMessage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
</UL>

<P><STRONG><a name="[ad]"></a>OsIpcUnblockAll</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, tcl.ipc.o(i.OsIpcUnblockAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OsIpcUnblockAll &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclBroadcastMessage
</UL>

<P><STRONG><a name="[a4]"></a>OsIpcUnblockThread</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, tcl.ipc.o(i.OsIpcUnblockThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjQueueRemoveNode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListRemoveDiffNode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadLeaveQueue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadTimerTickUpdate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSemaphore
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainSemaphore
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessage
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockAll
</UL>

<P><STRONG><a name="[94]"></a>OsIrqEnterISR</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tcl.irq.o(i.OsIrqEnterISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OsIrqEnterISR &rArr; OsThreadResume &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadResume
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>OsIrqModuleInit</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, tcl.irq.o(i.OsIrqModuleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OsIrqModuleInit &rArr; OsThreadCreate &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
</UL>

<P><STRONG><a name="[b3]"></a>OsKernelAddObject</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcl.kernel.o(i.OsKernelAddObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListAddNode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateSemaphore
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateMsgQueue
</UL>

<P><STRONG><a name="[93]"></a>OsKernelEnterIntrState</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcl.kernel.o(i.OsKernelEnterIntrState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OsKernelEnterIntrState
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>OsKernelLeaveIntrState</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tcl.kernel.o(i.OsKernelLeaveIntrState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OsKernelLeaveIntrState &rArr; OsThreadSchedule &rArr; CheckThreadStack
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>OsKernelTickISR</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tcl.kernel.o(i.OsKernelTickISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OsKernelTickISR &rArr; OsTimerTickUpdate &rArr; DispatchExpiredTimer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsTimerTickUpdate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadTimerTickUpdate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadTickUpdate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ab]"></a>OsObjListAddDiffNode</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tcl.object.o(i.OsObjListAddDiffNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OsObjListAddDiffNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
</UL>

<P><STRONG><a name="[92]"></a>OsObjListAddNode</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tcl.object.o(i.OsObjListAddNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelAddObject
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchExpiredTimer
</UL>

<P><STRONG><a name="[90]"></a>OsObjListAddPriorityNode</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcl.object.o(i.OsObjListAddPriorityNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OsObjListAddPriorityNode
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchExpiredTimer
</UL>

<P><STRONG><a name="[af]"></a>OsObjListRemoveDiffNode</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcl.object.o(i.OsObjListRemoveDiffNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OsObjListRemoveDiffNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadTimerTickUpdate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
</UL>

<P><STRONG><a name="[91]"></a>OsObjListRemoveNode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tcl.object.o(i.OsObjListRemoveNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OsObjListRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqDaemonEntry
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDaemonEntry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchExpiredTimer
</UL>

<P><STRONG><a name="[aa]"></a>OsObjQueueAddFifoNode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcl.object.o(i.OsObjQueueAddFifoNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OsObjQueueAddFifoNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
</UL>

<P><STRONG><a name="[a9]"></a>OsObjQueueAddPriorityNode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tcl.object.o(i.OsObjQueueAddPriorityNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OsObjQueueAddPriorityNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
</UL>

<P><STRONG><a name="[ae]"></a>OsObjQueueRemoveNode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcl.object.o(i.OsObjQueueRemoveNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadLeaveQueue
</UL>

<P><STRONG><a name="[b2]"></a>OsThreadCreate</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, tcl.thread.o(i.OsThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OsThreadCreate &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelAddObject
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuBuildThreadStack
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsTimerModuleInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadModuleInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqModuleInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateThread
</UL>

<P><STRONG><a name="[a8]"></a>OsThreadEnterQueue</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tcl.thread.o(i.OsThreadEnterQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OsThreadEnterQueue &rArr; OsObjQueueAddFifoNode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjQueueAddFifoNode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadTimerTickUpdate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSuspend
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadResume
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclActivateThread
</UL>

<P><STRONG><a name="[a7]"></a>OsThreadLeaveQueue</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcl.thread.o(i.OsThreadLeaveQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjQueueRemoveNode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadTimerTickUpdate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSuspend
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadResume
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclActivateThread
</UL>

<P><STRONG><a name="[bc]"></a>OsThreadModuleInit</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, tcl.thread.o(i.OsThreadModuleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OsThreadModuleInit &rArr; OsThreadCreate &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
</UL>

<P><STRONG><a name="[b0]"></a>OsThreadResume</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tcl.thread.o(i.OsThreadResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OsThreadResume &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadLeaveQueue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsTimerTickUpdate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqEnterISR
</UL>

<P><STRONG><a name="[b6]"></a>OsThreadSchedule</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tcl.thread.o(i.OsThreadSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OsThreadSchedule &rArr; CheckThreadStack
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuConfirmThreadSwitch
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuCancelThreadSwitch
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckThreadStack
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcThreadHiRP
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSuspend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelLeaveIntrState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReleaseSemaphore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclObtainSemaphore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclSendMessage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclBroadcastMessage
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclActivateThread
</UL>

<P><STRONG><a name="[a0]"></a>OsThreadSuspend</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcl.thread.o(i.OsThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OsThreadSuspend &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadLeaveQueue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqDaemonEntry
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDaemonEntry
</UL>

<P><STRONG><a name="[b8]"></a>OsThreadTickUpdate</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, tcl.thread.o(i.OsThreadTickUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OsThreadTickUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelTickISR
</UL>

<P><STRONG><a name="[b9]"></a>OsThreadTimerTickUpdate</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, tcl.thread.o(i.OsThreadTimerTickUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OsThreadTimerTickUpdate &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListRemoveDiffNode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadLeaveQueue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelTickISR
</UL>

<P><STRONG><a name="[bf]"></a>OsTimerModuleInit</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, tcl.timer.o(i.OsTimerModuleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OsTimerModuleInit &rArr; OsThreadCreate &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
</UL>

<P><STRONG><a name="[ba]"></a>OsTimerTickUpdate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tcl.timer.o(i.OsTimerTickUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OsTimerTickUpdate &rArr; DispatchExpiredTimer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadResume
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchExpiredTimer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelTickISR
</UL>

<P><STRONG><a name="[c2]"></a>Process_Robort_Direction_Cmd</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, parser.o(i.Process_Robort_Direction_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Process_Robort_Direction_Cmd &rArr; Resolve_Message_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_Message_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Parser
</UL>

<P><STRONG><a name="[87]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DMA_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[108]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[11f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[f5]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_ConfgPin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[11e]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[120]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[3b]"></a>RobortBeepThreadServer</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, beep.o(i.RobortBeepThreadServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = RobortBeepThreadServer &rArr; TclReceiveMessage &rArr; ReceiveMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_SetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.BindThreadFunction)
</UL>
<P><STRONG><a name="[40]"></a>RobortGpsThreadServer</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, gps.o(i.RobortGpsThreadServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = RobortGpsThreadServer &rArr; Robort_Fetch_GPS_Data &rArr; GPS_TransferEnd_Nema &rArr; nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclSendMessage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Fetch_GPS_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.BindThreadFunction)
</UL>
<P><STRONG><a name="[3d]"></a>RobortLightThreadServer</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, light.o(i.RobortLightThreadServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = RobortLightThreadServer &rArr; TclReceiveMessage &rArr; ReceiveMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_SetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.BindThreadFunction)
</UL>
<P><STRONG><a name="[3e]"></a>RobortMotorThreadServer</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, motor.o(i.RobortMotorThreadServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = RobortMotorThreadServer &rArr; TclReceiveMessage &rArr; ReceiveMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Speed_Control
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Direction_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.BindThreadFunction)
</UL>
<P><STRONG><a name="[3c]"></a>RobortParserThreadServer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, parser.o(i.RobortParserThreadServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RobortParserThreadServer &rArr; TclReceiveMessage &rArr; ReceiveMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Parser
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BroadcastInternalMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.BindThreadFunction)
</UL>
<P><STRONG><a name="[41]"></a>RobortReceiverThreadServer</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, receiver.o(i.RobortReceiverThreadServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = RobortReceiverThreadServer &rArr; STM32_UART_Read &rArr; TclObtainSemaphore &rArr; ObtainSemaphore &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclSendMessage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.BindThreadFunction)
</UL>
<P><STRONG><a name="[42]"></a>RobortSenderThreadServer</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, sender.o(i.RobortSenderThreadServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RobortSenderThreadServer &rArr; TclReceiveMessage &rArr; ReceiveMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Upload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.BindThreadFunction)
</UL>
<P><STRONG><a name="[3f]"></a>RobortSteerThreadServer</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, steer.o(i.RobortSteerThreadServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = RobortSteerThreadServer &rArr; TclReceiveMessage &rArr; ReceiveMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.BindThreadFunction)
</UL>
<P><STRONG><a name="[76]"></a>Robort_Beep_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, beep.o(i.Robort_Beep_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Robort_Beep_Init &rArr; STM32_GPIO_ConfgPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_SetPin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_ConfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASystemSetupEntry
</UL>

<P><STRONG><a name="[7b]"></a>Robort_GPS_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gps.o(i.Robort_GPS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = Robort_GPS_Init &rArr; GPS_DATA_Init &rArr; nmea_parser_init &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART3_DMA_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DATA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASystemSetupEntry
</UL>

<P><STRONG><a name="[77]"></a>Robort_Light_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, light.o(i.Robort_Light_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Robort_Light_Init &rArr; STM32_GPIO_ConfgPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_SetPin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_ConfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASystemSetupEntry
</UL>

<P><STRONG><a name="[78]"></a>Robort_Motor_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, motor.o(i.Robort_Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Robort_Motor_Init &rArr; TIM2_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER2_PWMControl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_SetPin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_ConfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASystemSetupEntry
</UL>

<P><STRONG><a name="[7a]"></a>Robort_Parser_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, parser.o(i.Robort_Parser_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Robort_Parser_Init &rArr; TclCreateMsgQueue &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateMsgQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASystemSetupEntry
</UL>

<P><STRONG><a name="[7d]"></a>Robort_Receiver_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, receiver.o(i.Robort_Receiver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Robort_Receiver_Init &rArr; STM32_UART_Init &rArr; UART1_Semphore_Init &rArr; TclCreateSemaphore &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateMsgQueue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASystemSetupEntry
</UL>

<P><STRONG><a name="[7c]"></a>Robort_Sender_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sender.o(i.Robort_Sender_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Robort_Sender_Init &rArr; TclCreateMsgQueue &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateMsgQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASystemSetupEntry
</UL>

<P><STRONG><a name="[79]"></a>Robort_Steer_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, steer.o(i.Robort_Steer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Robort_Steer_Init &rArr; TIM4_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER4_PWMControl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASystemSetupEntry
</UL>

<P><STRONG><a name="[db]"></a>STM32_GPIO_ConfgPin</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, bsp_gpio.o(i.STM32_GPIO_ConfgPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STM32_GPIO_ConfgPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Motor_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Light_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Beep_Init
</UL>

<P><STRONG><a name="[d4]"></a>STM32_GPIO_SetPin</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, bsp_gpio.o(i.STM32_GPIO_SetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STM32_GPIO_SetPin
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Motor_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Light_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Beep_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Direction
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortLightThreadServer
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortBeepThreadServer
</UL>

<P><STRONG><a name="[e3]"></a>STM32_TIMER2_PWMControl</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, bsp_pwm.o(i.STM32_TIMER2_PWMControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32_TIMER2_PWMControl
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Motor_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>

<P><STRONG><a name="[f0]"></a>STM32_TIMER3_PWMControl</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bsp_pwm.o(i.STM32_TIMER3_PWMControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32_TIMER3_PWMControl
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerTwoControl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerThreeControl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerSixControl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerSevenControl
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerOneControl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerFourControl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerFiveControl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerEightControl
</UL>

<P><STRONG><a name="[f2]"></a>STM32_TIMER4_PWMControl</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bsp_pwm.o(i.STM32_TIMER4_PWMControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32_TIMER4_PWMControl
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Init
</UL>

<P><STRONG><a name="[e6]"></a>STM32_UART1_Write</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, bsp_uart.o(i.STM32_UART1_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = STM32_UART1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DATA_Trans_Task_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Send_Frame
</UL>

<P><STRONG><a name="[e1]"></a>STM32_UART3_DMA_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_gps.o(i.STM32_UART3_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STM32_UART3_DMA_Init &rArr; UART3_DMA_Config &rArr; GPS_Interrupt_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_GPS_Init
</UL>

<P><STRONG><a name="[e5]"></a>STM32_UART_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_uart.o(i.STM32_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = STM32_UART_Init &rArr; UART1_Semphore_Init &rArr; TclCreateSemaphore &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Semphore_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Receiver_Init
</UL>

<P><STRONG><a name="[d9]"></a>STM32_UART_Read</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, bsp_uart.o(i.STM32_UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = STM32_UART_Read &rArr; TclObtainSemaphore &rArr; ObtainSemaphore &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclObtainSemaphore
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortReceiverThreadServer
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcl.stm32.f103rb.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OsKernelTickISR &rArr; OsTimerTickUpdate &rArr; DispatchExpiredTimer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelTickISR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelLeaveIntrState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelEnterIntrState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, bsp_timer.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcl.stm32.f103rb.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; OsIrqEnterISR &rArr; OsThreadResume &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelLeaveIntrState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelEnterIntrState
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqEnterISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>TIM2_PWM_Init</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, bsp_pwm.o(i.TIM2_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM2_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Motor_Init
</UL>

<P><STRONG><a name="[ef]"></a>TIM3_PWM_Init</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, bsp_pwm.o(i.TIM3_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM3_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Init
</UL>

<P><STRONG><a name="[f1]"></a>TIM4_PWM_Init</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, bsp_pwm.o(i.TIM4_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM4_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Init
</UL>

<P><STRONG><a name="[112]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[107]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[10d]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[109]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[10e]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[10a]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[10f]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[10b]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[110]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[10c]"></a>TIM_OC4Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[111]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
</UL>

<P><STRONG><a name="[fa]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER4_PWMControl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER2_PWMControl
</UL>

<P><STRONG><a name="[fb]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER4_PWMControl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER2_PWMControl
</UL>

<P><STRONG><a name="[fc]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER4_PWMControl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER2_PWMControl
</UL>

<P><STRONG><a name="[fd]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER4_PWMControl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER2_PWMControl
</UL>

<P><STRONG><a name="[f9]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER4_PWMControl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER2_PWMControl
</UL>

<P><STRONG><a name="[74]"></a>TclActivateThread</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tcl.thread.o(i.TclActivateThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = TclActivateThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadLeaveQueue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadEnterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSetupEntry
</UL>

<P><STRONG><a name="[7f]"></a>TclBroadcastMessage</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, tcl.message.o(i.TclBroadcastMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TclBroadcastMessage &rArr; OsIpcUnblockAll &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BroadcastInternalMessage
</UL>

<P><STRONG><a name="[e4]"></a>TclCreateMsgQueue</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, tcl.message.o(i.TclCreateMsgQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TclCreateMsgQueue &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelAddObject
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Sender_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Receiver_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Parser_Init
</UL>

<P><STRONG><a name="[114]"></a>TclCreateSemaphore</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, tcl.semaphore.o(i.TclCreateSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TclCreateSemaphore &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsKernelAddObject
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Semphore_Init
</UL>

<P><STRONG><a name="[72]"></a>TclCreateThread</STRONG> (Thumb, 318 bytes, Stack size 88 bytes, tcl.thread.o(i.TclCreateThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TclCreateThread &rArr; OsThreadCreate &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadCreate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSetupEntry
</UL>

<P><STRONG><a name="[102]"></a>TclObtainSemaphore</STRONG> (Thumb, 192 bytes, Stack size 120 bytes, tcl.semaphore.o(i.TclObtainSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TclObtainSemaphore &rArr; ObtainSemaphore &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainSemaphore
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcCleanContext
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Read
</UL>

<P><STRONG><a name="[d3]"></a>TclReceiveMessage</STRONG> (Thumb, 256 bytes, Stack size 120 bytes, tcl.message.o(i.TclReceiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TclReceiveMessage &rArr; ReceiveMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcCleanContext
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortSteerThreadServer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortSenderThreadServer
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortParserThreadServer
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortMotorThreadServer
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortLightThreadServer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortGpsThreadServer
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortBeepThreadServer
</UL>

<P><STRONG><a name="[115]"></a>TclReleaseSemaphore</STRONG> (Thumb, 236 bytes, Stack size 120 bytes, tcl.semaphore.o(i.TclReleaseSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TclReleaseSemaphore &rArr; ReleaseSemaphore &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSemaphore
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcCleanContext
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>TclSendMessage</STRONG> (Thumb, 198 bytes, Stack size 120 bytes, tcl.message.o(i.TclSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TclSendMessage &rArr; SendMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcCleanContext
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcBlockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortReceiverThreadServer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortGpsThreadServer
</UL>

<P><STRONG><a name="[116]"></a>TclStartKernel</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tcl.kernel.o(i.TclStartKernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TclStartKernel &rArr; OsTimerModuleInit &rArr; OsThreadCreate &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsTimerModuleInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadModuleInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIrqModuleInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLoadRootThread
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnableInt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuDisableInt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>TclTrace</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcl.kernel.o(i.TclTrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TclTrace
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSetupEntry
</UL>

<P><STRONG><a name="[100]"></a>UART1_Init</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bsp_uart.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Init
</UL>

<P><STRONG><a name="[e0]"></a>UART3_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bsp_uart.o(i.UART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART3_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_GPS_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, bsp_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; TclReleaseSemaphore &rArr; ReleaseSemaphore &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReleaseSemaphore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[8e]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DMA_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Uart1_Init
</UL>

<P><STRONG><a name="[118]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[11c]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[119]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[11d]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>Upload_ProcessDMAIRQ</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_uart.o(i.Upload_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Upload_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DATA_Trans_Task_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15a]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[15b]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[15c]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[132]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[15d]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[15e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[160]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[126]"></a>_nmea_parse_time</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, parse.o(i._nmea_parse_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
</UL>

<P><STRONG><a name="[cd]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Upload
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_pop
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; TclStartKernel &rArr; OsTimerModuleInit &rArr; OsThreadCreate &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclStartKernel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6f]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Upload
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Read
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateThreadStack
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[137]"></a>nmea_GPGGA2info</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, parse.o(i.nmea_GPGGA2info))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[138]"></a>nmea_GPGSA2info</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, parse.o(i.nmea_GPGSA2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nmea_GPGSA2info
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[139]"></a>nmea_GPGSV2info</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, parse.o(i.nmea_GPGSV2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nmea_GPGSV2info
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[12c]"></a>nmea_GPRMC2info</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, parse.o(i.nmea_GPRMC2info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nmea_GPRMC2info &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[13a]"></a>nmea_GPVTG2info</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, parse.o(i.nmea_GPVTG2info))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[12e]"></a>nmea_atof</STRONG> (Thumb, 54 bytes, Stack size 280 bytes, tok.o(i.nmea_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>

<P><STRONG><a name="[130]"></a>nmea_atoi</STRONG> (Thumb, 50 bytes, Stack size 280 bytes, tok.o(i.nmea_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nmea_atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_find_tail
</UL>

<P><STRONG><a name="[128]"></a>nmea_error</STRONG> (Thumb, 70 bytes, Stack size 1056 bytes, context.o(i.nmea_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_property
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
</UL>

<P><STRONG><a name="[133]"></a>nmea_find_tail</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, parse.o(i.nmea_find_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nmea_find_tail &rArr; nmea_atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[134]"></a>nmea_pack_type</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, parse.o(i.nmea_pack_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nmea_pack_type &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[9a]"></a>nmea_parse</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, parser_1.o(i.nmea_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_push
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_pop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPVTG2info
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGSV2info
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGSA2info
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGGA2info
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_TransferEnd_Nema
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_HalfTransferEnd_Nema
</UL>

<P><STRONG><a name="[13c]"></a>nmea_parse_GPGGA</STRONG> (Thumb, 148 bytes, Stack size 328 bytes, parse.o(i.nmea_parse_GPGGA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = nmea_parse_GPGGA &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[13e]"></a>nmea_parse_GPGSA</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, parse.o(i.nmea_parse_GPGSA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = nmea_parse_GPGSA &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[13f]"></a>nmea_parse_GPGSV</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, parse.o(i.nmea_parse_GPGSV))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = nmea_parse_GPGSV &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[140]"></a>nmea_parse_GPRMC</STRONG> (Thumb, 172 bytes, Stack size 336 bytes, parse.o(i.nmea_parse_GPRMC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[141]"></a>nmea_parse_GPVTG</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, parse.o(i.nmea_parse_GPVTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = nmea_parse_GPVTG &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[143]"></a>nmea_parser_buff_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, parser_1.o(i.nmea_parser_buff_clear))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>

<P><STRONG><a name="[98]"></a>nmea_parser_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, parser_1.o(i.nmea_parser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = nmea_parser_init &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_property
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DATA_Init
</UL>

<P><STRONG><a name="[13b]"></a>nmea_parser_pop</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, parser_1.o(i.nmea_parser_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nmea_parser_pop &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[136]"></a>nmea_parser_push</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, parser_1.o(i.nmea_parser_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_real_push
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
</UL>

<P><STRONG><a name="[142]"></a>nmea_parser_real_push</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, parser_1.o(i.nmea_parser_real_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_buff_clear
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_pack_type
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_find_tail
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_push
</UL>

<P><STRONG><a name="[131]"></a>nmea_property</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, context.o(i.nmea_property))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_trace_buff
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_error
</UL>

<P><STRONG><a name="[127]"></a>nmea_scanf</STRONG> (Thumb, 538 bytes, Stack size 72 bytes, tok.o(i.nmea_scanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
</UL>

<P><STRONG><a name="[145]"></a>nmea_time_now</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, time.o(i.nmea_time_now))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_zero_INFO
</UL>

<P><STRONG><a name="[13d]"></a>nmea_trace_buff</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, context.o(i.nmea_trace_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmea_trace_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_property
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPVTG
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
</UL>

<P><STRONG><a name="[97]"></a>nmea_zero_INFO</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, info.o(i.nmea_zero_INFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nmea_zero_INFO
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_time_now
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DATA_Init
</UL>

<P><STRONG><a name="[12f]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[104]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[105]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[43]"></a>IrqDaemonEntry</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tcl.irq.o(i.IrqDaemonEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = IrqDaemonEntry &rArr; OsThreadSuspend &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSuspend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListRemoveNode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcl.irq.o(i.OsIrqModuleInit)
</UL>
<P><STRONG><a name="[81]"></a>CalcThreadHiRP</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcl.thread.o(i.CalcThreadHiRP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CalcThreadHiRP
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuCalcHiPRIO
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
</UL>

<P><STRONG><a name="[83]"></a>CheckThreadStack</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcl.thread.o(i.CheckThreadStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CheckThreadStack
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSchedule
</UL>

<P><STRONG><a name="[45]"></a>RootThreadEntry</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcl.thread.o(i.RootThreadEntry))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuStartTickClock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnableInt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuDisableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcl.thread.o(i.OsThreadModuleInit)
</UL>
<P><STRONG><a name="[44]"></a>SuperviseThread</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tcl.thread.o(i.SuperviseThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SuperviseThread
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcl.thread.o(i.OsThreadCreate)
</UL>
<P><STRONG><a name="[8f]"></a>DispatchExpiredTimer</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tcl.timer.o(i.DispatchExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = DispatchExpiredTimer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListAddNode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListRemoveNode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListAddPriorityNode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsTimerTickUpdate
</UL>

<P><STRONG><a name="[46]"></a>TimerDaemonEntry</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, tcl.timer.o(i.TimerDaemonEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = TimerDaemonEntry &rArr; OsThreadSuspend &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsThreadSuspend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsObjListRemoveNode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuLeaveCritical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsCpuEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcl.timer.o(i.OsTimerModuleInit)
</UL>
<P><STRONG><a name="[cf]"></a>ConsumeMessage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tcl.message.o(i.ConsumeMessage))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessage
</UL>

<P><STRONG><a name="[ce]"></a>ReceiveMessage</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, tcl.message.o(i.ReceiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ReceiveMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMessage
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsumeMessage
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReceiveMessage
</UL>

<P><STRONG><a name="[d0]"></a>SaveMessage</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tcl.message.o(i.SaveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SaveMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessage
</UL>

<P><STRONG><a name="[103]"></a>SendMessage</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, tcl.message.o(i.SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SendMessage &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMessage
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclSendMessage
</UL>

<P><STRONG><a name="[a3]"></a>ObtainSemaphore</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tcl.semaphore.o(i.ObtainSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ObtainSemaphore &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclObtainSemaphore
</UL>

<P><STRONG><a name="[d1]"></a>ReleaseSemaphore</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tcl.semaphore.o(i.ReleaseSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ReleaseSemaphore &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsIpcUnblockThread
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclReleaseSemaphore
</UL>

<P><STRONG><a name="[6e]"></a>AllocateThreadStack</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.AllocateThreadStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AllocateThreadStack &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUserThreadInfo
</UL>

<P><STRONG><a name="[4b]"></a>AppSetupEntry</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, main.o(i.AppSetupEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = AppSetupEntry &rArr; TclCreateThread &rArr; OsThreadCreate &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclTrace
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateThread
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclActivateThread
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUserThreadInfo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BindThreadFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[70]"></a>BindThreadFunction</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.BindThreadFunction))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSetupEntry
</UL>

<P><STRONG><a name="[71]"></a>InitUserThreadInfo</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.InitUserThreadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitUserThreadInfo &rArr; AllocateThreadStack &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateThreadStack
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSetupEntry
</UL>

<P><STRONG><a name="[80]"></a>CalPWMDutyCycle</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, motor.o(i.CalPWMDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CalPWMDutyCycle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>

<P><STRONG><a name="[d7]"></a>Robort_Direction_Control</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, motor.o(i.Robort_Direction_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Robort_Direction_Control &rArr; Set_Motor_Speed &rArr; CalPWMDutyCycle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Direction
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortMotorThreadServer
</UL>

<P><STRONG><a name="[d8]"></a>Robort_Speed_Control</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, motor.o(i.Robort_Speed_Control))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortMotorThreadServer
</UL>

<P><STRONG><a name="[dc]"></a>Set_Motor_Direction</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, motor.o(i.Set_Motor_Direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_Motor_Direction &rArr; STM32_GPIO_SetPin
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GPIO_SetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Direction_Control
</UL>

<P><STRONG><a name="[dd]"></a>Set_Motor_Speed</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, motor.o(i.Set_Motor_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Set_Motor_Speed &rArr; CalPWMDutyCycle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER2_PWMControl
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPWMDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Direction_Control
</UL>

<P><STRONG><a name="[d2]"></a>Assemble_Message_Length</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parser.o(i.Assemble_Message_Length))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_Message_Data
</UL>

<P><STRONG><a name="[7e]"></a>BroadcastInternalMessage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, parser.o(i.BroadcastInternalMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BroadcastInternalMessage &rArr; TclBroadcastMessage &rArr; OsIpcUnblockAll &rArr; OsIpcUnblockThread &rArr; OsThreadLeaveQueue &rArr; OsObjQueueRemoveNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclBroadcastMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortParserThreadServer
</UL>

<P><STRONG><a name="[c0]"></a>Process_Robort_Beep_Cmd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, parser.o(i.Process_Robort_Beep_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Process_Robort_Beep_Cmd &rArr; Resolve_Message_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_Message_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Parser
</UL>

<P><STRONG><a name="[c3]"></a>Process_Robort_Light_Cmd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, parser.o(i.Process_Robort_Light_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Process_Robort_Light_Cmd &rArr; Resolve_Message_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_Message_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Parser
</UL>

<P><STRONG><a name="[c4]"></a>Process_Robort_Speed_Cmd</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, parser.o(i.Process_Robort_Speed_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Process_Robort_Speed_Cmd &rArr; Resolve_Message_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_Message_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Parser
</UL>

<P><STRONG><a name="[c5]"></a>Process_Robort_Steer_Cmd</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, parser.o(i.Process_Robort_Steer_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Process_Robort_Steer_Cmd &rArr; Resolve_Message_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_Message_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Parser
</UL>

<P><STRONG><a name="[c6]"></a>Protocol_Parser</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, parser.o(i.Protocol_Parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Protocol_Parser &rArr; Process_Robort_Direction_Cmd &rArr; Resolve_Message_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Direction_Cmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Adress_Veritfy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Steer_Cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Speed_Cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Light_Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Beep_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortParserThreadServer
</UL>

<P><STRONG><a name="[c1]"></a>Resolve_Message_Data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, parser.o(i.Resolve_Message_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Resolve_Message_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Assemble_Message_Length
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Direction_Cmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Steer_Cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Speed_Cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Light_Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Robort_Beep_Cmd
</UL>

<P><STRONG><a name="[c7]"></a>Robort_Adress_Veritfy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, parser.o(i.Robort_Adress_Veritfy))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Parser
</UL>

<P><STRONG><a name="[da]"></a>Robort_Steer_Control</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, steer.o(i.Robort_Steer_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Robort_Steer_Control &rArr; SteerTwoControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerTwoControl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerThreeControl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerSixControl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerSevenControl
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerOneControl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerFourControl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerFiveControl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerEightControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortSteerThreadServer
</UL>

<P><STRONG><a name="[ee]"></a>SteerEightControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, steer.o(i.SteerEightControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SteerEightControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>

<P><STRONG><a name="[eb]"></a>SteerFiveControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, steer.o(i.SteerFiveControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SteerFiveControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>

<P><STRONG><a name="[ea]"></a>SteerFourControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, steer.o(i.SteerFourControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SteerFourControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>

<P><STRONG><a name="[e7]"></a>SteerOneControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, steer.o(i.SteerOneControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SteerOneControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>

<P><STRONG><a name="[ed]"></a>SteerSevenControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, steer.o(i.SteerSevenControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SteerSevenControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>

<P><STRONG><a name="[ec]"></a>SteerSixControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, steer.o(i.SteerSixControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SteerSixControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>

<P><STRONG><a name="[e9]"></a>SteerThreeControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, steer.o(i.SteerThreeControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SteerThreeControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>

<P><STRONG><a name="[e8]"></a>SteerTwoControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, steer.o(i.SteerTwoControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SteerTwoControl &rArr; calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TIMER3_PWMControl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Steer_Control
</UL>

<P><STRONG><a name="[106]"></a>calDutyCycle</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, steer.o(i.calDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = calDutyCycle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerTwoControl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerThreeControl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerSixControl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerSevenControl
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerOneControl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerFourControl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerFiveControl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerEightControl
</UL>

<P><STRONG><a name="[96]"></a>GPS_DATA_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gps.o(i.GPS_DATA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = GPS_DATA_Init &rArr; nmea_parser_init &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_zero_INFO
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parser_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_GPS_Init
</UL>

<P><STRONG><a name="[99]"></a>GPS_HalfTransferEnd_Nema</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gps.o(i.GPS_HalfTransferEnd_Nema))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = GPS_HalfTransferEnd_Nema &rArr; nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Fetch_GPS_Data
</UL>

<P><STRONG><a name="[9e]"></a>GPS_TransferEnd_Nema</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gps.o(i.GPS_TransferEnd_Nema))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = GPS_TransferEnd_Nema &rArr; nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Fetch_GPS_Data
</UL>

<P><STRONG><a name="[d5]"></a>Robort_Fetch_GPS_Data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gps.o(i.Robort_Fetch_GPS_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = Robort_Fetch_GPS_Data &rArr; GPS_TransferEnd_Nema &rArr; nmea_parse &rArr; nmea_parser_push &rArr; nmea_parser_real_push &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_error &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GET_GPS_TransferEnd_FLAG
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GET_GPS_HalfTransferEnd_FLAG
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_TransferEnd_Nema
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_HalfTransferEnd_Nema
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortGpsThreadServer
</UL>

<P><STRONG><a name="[de]"></a>STM32_GET_GPS_HalfTransferEnd_FLAG</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gps.o(i.STM32_GET_GPS_HalfTransferEnd_FLAG))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Fetch_GPS_Data
</UL>

<P><STRONG><a name="[df]"></a>STM32_GET_GPS_TransferEnd_FLAG</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gps.o(i.STM32_GET_GPS_TransferEnd_FLAG))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Fetch_GPS_Data
</UL>

<P><STRONG><a name="[c8]"></a>Protocol_Upload</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sender.o(i.Protocol_Upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Protocol_Upload &rArr; Robort_Send_Frame &rArr; STM32_UART1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robort_Send_Frame
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobortSenderThreadServer
</UL>

<P><STRONG><a name="[cb]"></a>Robort_Send_Frame</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sender.o(i.Robort_Send_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Robort_Send_Frame &rArr; STM32_UART1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART1_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Upload
</UL>

<P><STRONG><a name="[cc]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sender.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Upload
</UL>

<P><STRONG><a name="[9b]"></a>GPS_Interrupt_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_gps.o(i.GPS_Interrupt_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPS_Interrupt_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DMA_Config
</UL>

<P><STRONG><a name="[ff]"></a>UART3_DMA_Config</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, bsp_gps.o(i.UART3_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART3_DMA_Config &rArr; GPS_Interrupt_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Interrupt_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART3_DMA_Init
</UL>

<P><STRONG><a name="[101]"></a>UART1_Semphore_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bsp_uart.o(i.UART1_Semphore_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = UART1_Semphore_Init &rArr; TclCreateSemaphore &rArr; OsKernelAddObject &rArr; OsObjListAddNode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsDebugPanic
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TclCreateSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_UART_Init
</UL>

<P><STRONG><a name="[124]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[123]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[12a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[129]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[47]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[64]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[69]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
